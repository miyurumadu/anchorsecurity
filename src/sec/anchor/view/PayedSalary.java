/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sec.anchor.view;

import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import sec.anchor.controller.EmployeeController;
import sec.anchor.controller.SalaryConstController;
import sec.anchor.controller.SalaryController;
import sec.anchor.model.Salary;
import sec.anchor.model.SalaryCons;

/**
 *
 * @author Miyuru Madusanka
 */
public class PayedSalary extends javax.swing.JPanel {

    /**
     * Creates new form AddEmployee
     */
    DefaultTableModel dtm;
    Salary viewAllSalarieswithNIC;
    int getSelection;
    String nicno;
    ArrayList<Salary> getAllSalaries;

    public PayedSalary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        monthCombo = new org.jdesktop.swingx.JXComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        payedSalariesTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        yearCombo = new javax.swing.JComboBox();
        deleteAllButton = new javax.swing.JButton();
        paySheetButton = new javax.swing.JButton();
        deleteSingle = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));
        setPreferredSize(new java.awt.Dimension(1024, 568));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Payed Salaries");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(645, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Source Sans Pro", 0, 16)); // NOI18N
        jLabel5.setText("Month:");

        monthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "Sepetember", "Octomber", "November", "December" }));
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });

        payedSalariesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number", "Nic Number", "Name", "Work Hours", "Basic Salary", "Budget Al.", "Other Al.", "OverTime", "EPF Emp. Paid", "Total Salary", "Fine", "Uniform", "Advance", "Net Salary", "Paid Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(payedSalariesTable);

        jLabel6.setFont(new java.awt.Font("Source Sans Pro", 0, 16)); // NOI18N
        jLabel6.setText("Year:");

        yearCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2017", "2018", "2019", "2020" }));

        deleteAllButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteAllButton.setText("Delete All");
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });

        paySheetButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        paySheetButton.setText("Pay Sheet");
        paySheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paySheetButtonActionPerformed(evt);
            }
        });

        deleteSingle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteSingle.setText("Delete");
        deleteSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSingleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteSingle, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paySheetButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(paySheetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteSingle, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed
        String month = monthCombo.getSelectedItem() + "";
        String year = yearCombo.getSelectedItem() + "";
        viewPayedSalaries(month, year);


    }//GEN-LAST:event_monthComboActionPerformed

    private void deleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtonActionPerformed
        int res;
        if (JOptionPane.showConfirmDialog(this, "This will delete all employees' salary values in " + monthCombo.getSelectedItem() + "-" + yearCombo.getSelectedItem() + "", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.CANCEL_OPTION) {

        } else {
            try {
                res = SalaryController.deleteSalaries(monthCombo.getSelectedItem() + "", yearCombo.getSelectedItem() + "");
                if (res > 0) {
                    JOptionPane.showMessageDialog(this, "Salary Records Cleared in " + monthCombo.getSelectedItem() + "" + "-" + yearCombo.getSelectedItem() + "");
                    viewPayedSalaries(monthCombo.getSelectedItem() + "", yearCombo.getSelectedItem() + "");
                } else {
                    JOptionPane.showMessageDialog(this, "Cannot Clear Salary Records ", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(PayedSalary.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteAllButtonActionPerformed

    private void paySheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paySheetButtonActionPerformed
        if (payedSalariesTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Please select an Item", "Attention", 2);
        } else {
            try {
                getSelection = payedSalariesTable.getSelectedRow();
                nicno = payedSalariesTable.getValueAt(getSelection, 1).toString();
                viewAllSalarieswithNIC = SalaryController.viewAllSalarieswithNIC(monthCombo.getSelectedItem() + "", yearCombo.getSelectedItem() + "", nicno);
                System.out.println(viewAllSalarieswithNIC.getTotal_sal());
                System.out.println(viewAllSalarieswithNIC.getNetsalary());
                if (Double.parseDouble(payedSalariesTable.getValueAt(getSelection, 9) + "") > 13500) {
                    // System.out.println(viewAllSalarieswithNIC.getTotal_sal());
                    paysheet11();
                } else {
                    System.out.println(viewAllSalarieswithNIC.getTotal_sal());
                    paysheet12();
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(PayedSalary.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_paySheetButtonActionPerformed

    private void deleteSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSingleActionPerformed
        int selected = payedSalariesTable.getSelectedRow();
        String nic = payedSalariesTable.getValueAt(selected, 1).toString();
        int res;
        if (JOptionPane.showConfirmDialog(this, "Delete,Are you sure?", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.CANCEL_OPTION) {

        } else {
            try {
                res = SalaryController.deleteSingleSalary(nic, monthCombo.getSelectedItem() + "", yearCombo.getSelectedItem() + "");
                if (res > 0) {
                    JOptionPane.showMessageDialog(this, "Salary Record removed  for " + nic + " of " + monthCombo.getSelectedItem() + "" + "-" + yearCombo.getSelectedItem() + "");
                    viewPayedSalaries(monthCombo.getSelectedItem() + "", yearCombo.getSelectedItem() + "");
                } else {
                    JOptionPane.showMessageDialog(this, "Cannot Clear Salary Record ", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(PayedSalary.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteSingleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton deleteSingle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXComboBox monthCombo;
    private javax.swing.JButton paySheetButton;
    private javax.swing.JTable payedSalariesTable;
    private javax.swing.JComboBox yearCombo;
    // End of variables declaration//GEN-END:variables
 private void viewPayedSalaries(String month, String year) {
        dtm = (DefaultTableModel) payedSalariesTable.getModel();

        try {

            getAllSalaries = SalaryController.viewAllSalaries(month, year);
            SalaryCons searchBasicSal;
            dtm.setRowCount(0);
            int number = 0;
            for (Salary salary : getAllSalaries) {
                searchBasicSal = SalaryConstController.searchBasics(salary.getNicnumber());
                String[] rows = {(++number) + "", salary.getNicnumber() + "", EmployeeController.searchName(salary.getNicnumber()) + "", salary.getWorkdays() + "", searchBasicSal.getBasic_salary() + "", searchBasicSal.getBudget_al() + "", salary.getOther_al() + "", salary.getOvertime() + "", salary.getEpfEmp() + "", salary.getTotal_sal() + "", salary.getFines() + "", salary.getUniform() + "", salary.getAdvance() + "",
                    salary.getNetsalary() + "", salary.getPayeddate() + ""};

                dtm.addRow(rows);

            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PayedSalary.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void paysheet11() {
        String reportSource = "/sec/anchor/reports/PaySheet.jrxml";
        InputStream is = null;
        try {
            is = getClass().getResourceAsStream(reportSource);
            JasperReport jasperReport = (JasperReport) JasperCompileManager.compileReport(is);
            Map<String, Object> param = new HashMap<>();
            param.put("NAME", payedSalariesTable.getValueAt(getSelection, 2));
            param.put("NIC", payedSalariesTable.getValueAt(getSelection, 1));
            param.put("EPFNO", EmployeeController.searchEPFno(nicno) + "");
            param.put("MONTH", monthCombo.getSelectedItem() + "-" + yearCombo.getSelectedItem());
            param.put("BASIC", payedSalariesTable.getValueAt(getSelection, 4));
            param.put("BUDGETAL", payedSalariesTable.getValueAt(getSelection, 5));
            param.put("OT", payedSalariesTable.getValueAt(getSelection, 7));
            param.put("OTHERAL", payedSalariesTable.getValueAt(getSelection, 6));
            param.put("TOTAL", payedSalariesTable.getValueAt(getSelection, 9));
            if (Double.parseDouble(payedSalariesTable.getValueAt(getSelection, 8) + "") > 0.00) {
                param.put("EPFEMP", viewAllSalarieswithNIC.getEpfEmp());
            } else {
                param.put("EPFEMP", "-");
            }
            param.put("UNIFORM", payedSalariesTable.getValueAt(getSelection, 11));
            param.put("ADVANCE", payedSalariesTable.getValueAt(getSelection, 12));
            param.put("FINE", payedSalariesTable.getValueAt(getSelection, 10));
            param.put("TOTALD", Double.parseDouble(payedSalariesTable.getValueAt(getSelection, 9) + "") - Double.parseDouble(payedSalariesTable.getValueAt(getSelection, 13) + ""));
            param.put("NETSAL", payedSalariesTable.getValueAt(getSelection, 13));
            param.put("EPFCOMP", viewAllSalarieswithNIC.getEpfcompany());
            param.put("ETF", viewAllSalarieswithNIC.getEtfemp());
            param.put("TOTALCOMP", viewAllSalarieswithNIC.getEpfcompany() + viewAllSalarieswithNIC.getEtfemp());
            JasperPrint jasperPrint;
            jasperPrint = JasperFillManager.fillReport(jasperReport, param);
            JasperViewer.viewReport(jasperPrint, false);
            //...
        } catch (JRException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PaySalary.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                is.close();
            } catch (IOException exp) {
            }
        }
    }

    private void paysheet12() {
        String reportSource = "/sec/anchor/reports/PaySheet.jrxml";
        InputStream is = null;
        try {
            is = getClass().getResourceAsStream(reportSource);
            JasperReport jasperReport = (JasperReport) JasperCompileManager.compileReport(is);
            Map<String, Object> param = new HashMap<>();
            param.put("NAME", payedSalariesTable.getValueAt(getSelection, 2));
            param.put("NIC", payedSalariesTable.getValueAt(getSelection, 1));
            param.put("EPFNO", EmployeeController.searchEPFno(nicno) + "");
            param.put("MONTH", monthCombo.getSelectedItem() + "-" + yearCombo.getSelectedItem());
            param.put("BASIC", "-");
            param.put("BUDGETAL", "-");
            param.put("OT", "-");
            param.put("OTHERAL", "-");
            param.put("TOTAL", payedSalariesTable.getValueAt(getSelection, 9));
            param.put("EPFEMP", "-");
            param.put("UNIFORM", payedSalariesTable.getValueAt(getSelection, 11));
            param.put("ADVANCE", payedSalariesTable.getValueAt(getSelection, 12));
            param.put("FINE", payedSalariesTable.getValueAt(getSelection, 10));
            param.put("TOTALD", Double.parseDouble(payedSalariesTable.getValueAt(getSelection, 9) + "") - Double.parseDouble(payedSalariesTable.getValueAt(getSelection, 13) + ""));
            param.put("NETSAL", payedSalariesTable.getValueAt(getSelection, 13));
            param.put("EPFCOMP", "-");
            param.put("ETF", "-");
            param.put("TOTALCOMP", "-");
            JasperPrint jasperPrint;
            jasperPrint = JasperFillManager.fillReport(jasperReport, param);
            JasperViewer.viewReport(jasperPrint, false);
            //...
        } catch (JRException ex) {
            Logger.getLogger(PaySalary.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PaySalary.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PaySalary.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                is.close();
            } catch (Exception exp) {
            }
        }
    }

}
